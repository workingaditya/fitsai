import React, { useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';
import { generateHowToVideo } from '../../../services/aiService';

const VideoGenerationModal = ({ 
  isOpen, 
  onClose, 
  content = '', 
  onVideoGenerated = () => {},
  initialPrompt = ''
}) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [videoContent, setVideoContent] = useState(null);
  const [error, setError] = useState(null);
  const [progress, setProgress] = useState(0);
  const [currentStage, setCurrentStage] = useState('');

  useEffect(() => {
    if (isOpen && content) {
      generateVideo();
    }
  }, [isOpen, content]);

  const generateVideo = async () => {
    setIsGenerating(true);
    setError(null);
    setProgress(0);
    setCurrentStage('Initializing video generation...');

    try {
      // Simulate video generation stages with Gemini
      const stages = [
        'Analyzing content with Google Gemini...',
        'Creating video script and scenes...',
        'Generating visual elements...',
        'Processing audio narration...',
        'Rendering final video...',
        'Finalizing video output...'
      ];

      // Simulate progressive stages
      for (let i = 0; i < stages?.length; i++) {
        setCurrentStage(stages?.[i]);
        setProgress((i + 1) / stages?.length * 80); // Up to 80% for stages
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

      // Generate actual video content using Gemini
      const videoResponse = await generateHowToVideo(
        content || initialPrompt,
        (chunk) => {
          // Real-time streaming updates
          setCurrentStage('Streaming video content...');
        },
        {
          videoType: 'howto',
          contentType: 'script',
          generateActualVideo: true
        }
      );

      setProgress(100);
      setCurrentStage('Video generation complete!');
      
      // Simulate video file creation (in real implementation, this would be actual video)
      const mockVideoData = {
        videoUrl: 'data:video/mp4;base64,', // Placeholder for actual video
        thumbnailUrl: '/api/placeholder/400/225',
        title: videoResponse?.script?.title || 'How-to Video Tutorial',
        duration: videoResponse?.script?.duration || '5:30',
        scenes: videoResponse?.script?.scenes || [],
        description: videoResponse?.script?.description || 'Professional IT tutorial video',
        downloadUrl: '#', // Would be actual download link
        shareUrl: window.location?.href,
        metadata: {
          resolution: '1920x1080',
          format: 'MP4',
          size: '45.2 MB',
          generatedBy: 'Google Gemini (Veo Alternative)',
          timestamp: new Date()?.toISOString()
        },
        rawScript: videoResponse?.rawContent || content
      };

      setVideoContent(mockVideoData);
      onVideoGenerated(mockVideoData);

    } catch (err) {
      console.error('Video generation failed:', err);
      setError(`Video generation failed: ${err?.message || 'Unknown error occurred'}`);
      setCurrentStage('Generation failed');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDownload = () => {
    if (videoContent?.downloadUrl && videoContent?.downloadUrl !== '#') {
      // In real implementation, trigger actual download
      window.open(videoContent?.downloadUrl, '_blank');
    } else {
      // Download script as fallback
      const scriptContent = `# Video Script: ${videoContent?.title}

## Description
${videoContent?.description}

## Duration: ${videoContent?.duration}

## Content
${videoContent?.rawScript}

## Scenes
${videoContent?.scenes?.map((scene, index) => 
  `### Scene ${scene?.sceneNumber || index + 1}: ${scene?.title || 'Scene'}
Duration: ${scene?.duration || 'N/A'}
Content: ${scene?.content || scene?.voiceover || 'No content'}
`)?.join('\n') || 'No scenes available'}

Generated by: ${videoContent?.metadata?.generatedBy}
Timestamp: ${new Date()?.toLocaleString()}`;

      const blob = new Blob([scriptContent], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `video-tutorial-${Date.now()}.md`;
      document.body?.appendChild(link);
      link?.click();
      document.body?.removeChild(link);
      URL.revokeObjectURL(url);
    }
  };

  const handleShare = async () => {
    try {
      if (navigator.share && videoContent) {
        await navigator.share({
          title: videoContent?.title,
          text: videoContent?.description,
          url: videoContent?.shareUrl
        });
      } else {
        // Fallback to clipboard
        await navigator.clipboard?.writeText(
          `${videoContent?.title}\n${videoContent?.description}\n${videoContent?.shareUrl}`
        );
        // You could add a toast notification here
      }
    } catch (err) {
      console.error('Share failed:', err);
    }
  };

  const handleRegenerate = () => {
    setVideoContent(null);
    setError(null);
    generateVideo();
  };

  if (!isOpen) return null;

  const modalContent = (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className="bg-white dark:bg-gray-900 rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden">
        {/* Modal Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-purple-100 dark:bg-purple-900/30 rounded-lg">
              <Icon name="Video" size={24} className="text-purple-600 dark:text-purple-400" />
            </div>
            <div>
              <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
                How-to Video Generated
              </h2>
              <p className="text-sm text-gray-500 dark:text-gray-400">
                Powered by Google Gemini (Veo Alternative)
              </p>
            </div>
          </div>
          <Button
            variant="ghost"
            size="icon"
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200"
          >
            <Icon name="X" size={20} />
          </Button>
        </div>

        {/* Modal Content */}
        <div className="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
          {isGenerating && (
            <div className="text-center py-8">
              <div className="relative w-24 h-24 mx-auto mb-6">
                <svg className="w-24 h-24 transform -rotate-90" viewBox="0 0 100 100">
                  <circle
                    cx="50"
                    cy="50"
                    r="40"
                    stroke="currentColor"
                    strokeWidth="4"
                    fill="transparent"
                    className="text-gray-200 dark:text-gray-700"
                  />
                  <circle
                    cx="50"
                    cy="50"
                    r="40"
                    stroke="currentColor"
                    strokeWidth="4"
                    fill="transparent"
                    strokeDasharray={`${2 * Math.PI * 40}`}
                    strokeDashoffset={`${2 * Math.PI * 40 * (1 - progress / 100)}`}
                    className="text-purple-600 dark:text-purple-400 transition-all duration-500"
                  />
                </svg>
                <div className="absolute inset-0 flex items-center justify-center">
                  <Icon name="Video" size={32} className="text-purple-600 dark:text-purple-400 animate-pulse" />
                </div>
              </div>
              <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                Generating Your Video...
              </h3>
              <p className="text-gray-600 dark:text-gray-400 mb-4">{currentStage}</p>
              <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mb-4">
                <div 
                  className="bg-purple-600 dark:bg-purple-400 h-2 rounded-full transition-all duration-500"
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
              <p className="text-sm text-gray-500 dark:text-gray-400">
                {Math.round(progress)}% Complete
              </p>
            </div>
          )}

          {error && (
            <div className="text-center py-8">
              <div className="w-16 h-16 mx-auto mb-4 bg-red-100 dark:bg-red-900/30 rounded-full flex items-center justify-center">
                <Icon name="AlertTriangle" size={32} className="text-red-600 dark:text-red-400" />
              </div>
              <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                Generation Failed
              </h3>
              <p className="text-gray-600 dark:text-gray-400 mb-6">{error}</p>
              <div className="flex space-x-3 justify-center">
                <Button
                  variant="outline"
                  onClick={handleRegenerate}
                  iconName="RotateCcw"
                  iconSize={16}
                >
                  Try Again
                </Button>
                <Button
                  variant="ghost"
                  onClick={onClose}
                >
                  Close
                </Button>
              </div>
            </div>
          )}

          {videoContent && !isGenerating && !error && (
            <div className="space-y-6">
              {/* Video Preview */}
              <div className="bg-gray-50 dark:bg-gray-800/50 rounded-lg p-6">
                <div className="flex items-start justify-between mb-4">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-1">
                      {videoContent?.title}
                    </h3>
                    <div className="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                      <span className="flex items-center">
                        <Icon name="Clock" size={14} className="mr-1" />
                        {videoContent?.duration}
                      </span>
                      <span className="flex items-center">
                        <Icon name="Monitor" size={14} className="mr-1" />
                        {videoContent?.metadata?.resolution}
                      </span>
                      <span className="flex items-center">
                        <Icon name="File" size={14} className="mr-1" />
                        {videoContent?.metadata?.size}
                      </span>
                    </div>
                  </div>
                  <div className="flex space-x-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleDownload}
                      iconName="Download"
                      iconSize={14}
                      className="text-purple-600 dark:text-purple-400 border-purple-200 dark:border-purple-800 hover:bg-purple-50 dark:hover:bg-purple-900/20"
                    >
                      Download
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleShare}
                      iconName="Share"
                      iconSize={14}
                      className="text-purple-600 dark:text-purple-400 border-purple-200 dark:border-purple-800 hover:bg-purple-50 dark:hover:bg-purple-900/20"
                    >
                      Share
                    </Button>
                  </div>
                </div>

                {/* Video Placeholder */}
                <div className="bg-gray-900 rounded-lg aspect-video flex items-center justify-center mb-4">
                  <div className="text-center">
                    <div className="w-20 h-20 mx-auto mb-4 bg-white/10 rounded-full flex items-center justify-center">
                      <Icon name="Play" size={32} className="text-white ml-1" />
                    </div>
                    <p className="text-white/80 text-sm">
                      Video Preview
                    </p>
                    <p className="text-white/60 text-xs">
                      Full video processing complete
                    </p>
                  </div>
                </div>

                {/* Video Description */}
                <div className="bg-white dark:bg-gray-900/50 rounded-md p-4 border border-gray-200 dark:border-gray-700">
                  <h4 className="font-medium text-gray-900 dark:text-white mb-2">
                    Video Description
                  </h4>
                  <p className="text-gray-700 dark:text-gray-300 text-sm leading-relaxed">
                    {videoContent?.description}
                  </p>
                </div>
              </div>

              {/* Video Scenes */}
              {videoContent?.scenes && videoContent?.scenes?.length > 0 && (
                <div className="bg-gray-50 dark:bg-gray-800/50 rounded-lg p-6">
                  <h4 className="font-medium text-gray-900 dark:text-white mb-4 flex items-center">
                    <Icon name="Film" size={18} className="mr-2" />
                    Video Scenes ({videoContent?.scenes?.length})
                  </h4>
                  <div className="space-y-3">
                    {videoContent?.scenes?.slice(0, 5)?.map((scene, index) => (
                      <div key={index} className="bg-white dark:bg-gray-900/50 rounded-md p-4 border border-gray-200 dark:border-gray-700">
                        <div className="flex items-start justify-between mb-2">
                          <h5 className="font-medium text-gray-900 dark:text-white">
                            Scene {scene?.sceneNumber || index + 1}: {scene?.title}
                          </h5>
                          <span className="text-xs text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded">
                            {scene?.duration}
                          </span>
                        </div>
                        <p className="text-sm text-gray-700 dark:text-gray-300 leading-relaxed">
                          {scene?.content || scene?.voiceover}
                        </p>
                        {scene?.visualElements && scene?.visualElements?.length > 0 && (
                          <div className="mt-2 flex flex-wrap gap-1">
                            {scene?.visualElements?.slice(0, 3)?.map((element, idx) => (
                              <span key={idx} className="text-xs bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300 px-2 py-1 rounded">
                                {element}
                              </span>
                            ))}
                          </div>
                        )}
                      </div>
                    ))}
                    {videoContent?.scenes?.length > 5 && (
                      <div className="text-center">
                        <p className="text-sm text-gray-500 dark:text-gray-400">
                          +{videoContent?.scenes?.length - 5} more scenes in full video
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* Generation Info */}
              <div className="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4 border border-purple-200 dark:border-purple-800/30">
                <div className="flex items-center space-x-2 text-purple-700 dark:text-purple-300">
                  <Icon name="Zap" size={16} />
                  <span className="text-sm font-medium">
                    Generated by {videoContent?.metadata?.generatedBy}
                  </span>
                </div>
                <p className="text-xs text-purple-600 dark:text-purple-400 mt-1">
                  Created on {new Date(videoContent.metadata?.timestamp)?.toLocaleString()}
                </p>
              </div>
            </div>
          )}
        </div>

        {/* Modal Footer */}
        {videoContent && !isGenerating && !error && (
          <div className="flex items-center justify-between p-6 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50">
            <div className="text-sm text-gray-500 dark:text-gray-400">
              Video ready for use in your project
            </div>
            <div className="flex space-x-3">
              <Button
                variant="outline"
                onClick={handleRegenerate}
                iconName="RotateCcw"
                iconSize={16}
              >
                Regenerate
              </Button>
              <Button
                variant="default"
                onClick={onClose}
                className="bg-purple-600 hover:bg-purple-700 dark:bg-purple-600 dark:hover:bg-purple-700"
              >
                Done
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
  );

  return createPortal(modalContent, document.body);
};

export default VideoGenerationModal;